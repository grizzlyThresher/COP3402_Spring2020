
Correct Output for Factorial Program



Source Program:
var f, n;
procedure fact;
var ans1;
begin
 ans1:=n;
  n:= n-1;
   if n = 0 then 
   f := 1
    else
     call fact;

      f:=f*ans1;
      end;
      begin
      n:=3;
      call fact;
      write f
      end.


Lexeme Table:
lexeme           token type
var              29
f                2
,                17
n                2
;                18
procedure        30
fact             2
;                18
var              29
ans1             2
;                18
begin            21
ans1             2
:=               20
n                2
;                18
n                2
:=               20
n                2
-                5
1                3
;                18
if               23
n                2
=                9
0                3
then             24
f                2
:=               20
1                3
else             33
call             27
fact             2
;                18
f                2
:=               20
f                2
*                6
ans1             2
;                18
end              22
;                18
begin            21
n                2
:=               20
3                3
;                18
call             27
fact             2
;                18
write            31
f                2
end              22
.                19


Lexeme List:
29|2|f|17|2|n|18|30|2|fact|18|29|2|ans1|18|21|2|ans1|20|2|n|18|2|n|20|2|n|5|3|1|18|23|2|n|9|3|0|24|2|f|20|3|1|33|27|2|fact|18|2|f|20|2|f|6|2|ans1|18|22|18|21|2|n|20|3|3|18|27|2|fact|18|31|2|f|22|19|
No Errors, program is syntactically correct.

0      jmp    0   0    21 
1      inc    0   0    5 
2      lod    0   1    1 
3      sto    0   0    4 
4      lod    0   1    1 
5      lit    1   0    1 
6      sub    0   0    1 
7      sto    0   1    1 
8      lod    0   1    1 
9      lit    1   0    0 
10     eql    0   0    1 
11     jpc    0   0    15 
12     lit    0   0    1 
13     sto    0   1    0 
14     jmp    0   0    16 
15     cal    0   1    1 
16     lod    0   1    0 
17     lod    1   0    4 
18     mul    0   0    1 
19     sto    0   1    0 
20     ret    0   0    0 
21     inc    0   0    2 
22     lit    0   0    3 
23     sto    0   0    1 
24     cal    0   0    1 
25     lod    0   0    0 
26     sio    0   0    1 
27     sio    0   0    3 


                          pc    bp    sp    registers
Initial values:           0     1     0     0   0   0   0   0   0   0   0

0   jmp  0  0  21         21    1     0     0   0   0   0   0   0   0   0   
Stack: 

21  inc  0  0  2          22    1     2     0   0   0   0   0   0   0   0   
Stack: 0 0 

22  lit  0  0  3          23    1     2     3   0   0   0   0   0   0   0   
Stack: 0 0 

23  sto  0  0  1          24    1     2     3   0   0   0   0   0   0   0   
Stack: 0 3 

24  cal  0  0  1          1     3     2     3   0   0   0   0   0   0   0   
Stack: 0 3 

1   inc  0  0  5          2     3     7     3   0   0   0   0   0   0   0   
Stack: 0 3 | 0 1 1 25 0 

2   lod  0  1  1          3     3     7     3   0   0   0   0   0   0   0   
Stack: 0 3 | 0 1 1 25 0 

3   sto  0  0  4          4     3     7     3   0   0   0   0   0   0   0   
Stack: 0 3 | 0 1 1 25 3 

4   lod  0  1  1          5     3     7     3   0   0   0   0   0   0   0   
Stack: 0 3 | 0 1 1 25 3 

5   lit  1  0  1          6     3     7     3   1   0   0   0   0   0   0   
Stack: 0 3 | 0 1 1 25 3 

6   sub  0  0  1          7     3     7     2   1   0   0   0   0   0   0   
Stack: 0 3 | 0 1 1 25 3 

7   sto  0  1  1          8     3     7     2   1   0   0   0   0   0   0   
Stack: 0 2 | 0 1 1 25 3 

8   lod  0  1  1          9     3     7     2   1   0   0   0   0   0   0   
Stack: 0 2 | 0 1 1 25 3 

9   lit  1  0  0          10    3     7     2   0   0   0   0   0   0   0   
Stack: 0 2 | 0 1 1 25 3 

10  eql  0  0  1          11    3     7     0   0   0   0   0   0   0   0   
Stack: 0 2 | 0 1 1 25 3 

11  jpc  0  0  15         15    3     7     0   0   0   0   0   0   0   0   
Stack: 0 2 | 0 1 1 25 3 

15  cal  0  1  1          1     8     7     0   0   0   0   0   0   0   0   
Stack: 0 2 | 0 1 1 25 3 

1   inc  0  0  5          2     8     12    0   0   0   0   0   0   0   0   
Stack: 0 2 | 0 1 1 25 3 | 0 1 3 16 0 

2   lod  0  1  1          3     8     12    2   0   0   0   0   0   0   0   
Stack: 0 2 | 0 1 1 25 3 | 0 1 3 16 0 

3   sto  0  0  4          4     8     12    2   0   0   0   0   0   0   0   
Stack: 0 2 | 0 1 1 25 3 | 0 1 3 16 2 

4   lod  0  1  1          5     8     12    2   0   0   0   0   0   0   0   
Stack: 0 2 | 0 1 1 25 3 | 0 1 3 16 2 

5   lit  1  0  1          6     8     12    2   1   0   0   0   0   0   0   
Stack: 0 2 | 0 1 1 25 3 | 0 1 3 16 2 

6   sub  0  0  1          7     8     12    1   1   0   0   0   0   0   0   
Stack: 0 2 | 0 1 1 25 3 | 0 1 3 16 2 

7   sto  0  1  1          8     8     12    1   1   0   0   0   0   0   0   
Stack: 0 1 | 0 1 1 25 3 | 0 1 3 16 2 

8   lod  0  1  1          9     8     12    1   1   0   0   0   0   0   0   
Stack: 0 1 | 0 1 1 25 3 | 0 1 3 16 2 

9   lit  1  0  0          10    8     12    1   0   0   0   0   0   0   0   
Stack: 0 1 | 0 1 1 25 3 | 0 1 3 16 2 

10  eql  0  0  1          11    8     12    0   0   0   0   0   0   0   0   
Stack: 0 1 | 0 1 1 25 3 | 0 1 3 16 2 

11  jpc  0  0  15         15    8     12    0   0   0   0   0   0   0   0   
Stack: 0 1 | 0 1 1 25 3 | 0 1 3 16 2 

15  cal  0  1  1          1     13    12    0   0   0   0   0   0   0   0   
Stack: 0 1 | 0 1 1 25 3 | 0 1 3 16 2 

1   inc  0  0  5          2     13    17    0   0   0   0   0   0   0   0   
Stack: 0 1 | 0 1 1 25 3 | 0 1 3 16 2 | 0 1 8 16 0 

2   lod  0  1  1          3     13    17    1   0   0   0   0   0   0   0   
Stack: 0 1 | 0 1 1 25 3 | 0 1 3 16 2 | 0 1 8 16 0 

3   sto  0  0  4          4     13    17    1   0   0   0   0   0   0   0   
Stack: 0 1 | 0 1 1 25 3 | 0 1 3 16 2 | 0 1 8 16 1 

4   lod  0  1  1          5     13    17    1   0   0   0   0   0   0   0   
Stack: 0 1 | 0 1 1 25 3 | 0 1 3 16 2 | 0 1 8 16 1 

5   lit  1  0  1          6     13    17    1   1   0   0   0   0   0   0   
Stack: 0 1 | 0 1 1 25 3 | 0 1 3 16 2 | 0 1 8 16 1 

6   sub  0  0  1          7     13    17    0   1   0   0   0   0   0   0   
Stack: 0 1 | 0 1 1 25 3 | 0 1 3 16 2 | 0 1 8 16 1 

7   sto  0  1  1          8     13    17    0   1   0   0   0   0   0   0   
Stack: 0 0 | 0 1 1 25 3 | 0 1 3 16 2 | 0 1 8 16 1 

8   lod  0  1  1          9     13    17    0   1   0   0   0   0   0   0   
Stack: 0 0 | 0 1 1 25 3 | 0 1 3 16 2 | 0 1 8 16 1 

9   lit  1  0  0          10    13    17    0   0   0   0   0   0   0   0   
Stack: 0 0 | 0 1 1 25 3 | 0 1 3 16 2 | 0 1 8 16 1 

10  eql  0  0  1          11    13    17    1   0   0   0   0   0   0   0   
Stack: 0 0 | 0 1 1 25 3 | 0 1 3 16 2 | 0 1 8 16 1 

11  jpc  0  0  15         12    13    17    1   0   0   0   0   0   0   0   
Stack: 0 0 | 0 1 1 25 3 | 0 1 3 16 2 | 0 1 8 16 1 

12  lit  0  0  1          13    13    17    1   0   0   0   0   0   0   0   
Stack: 0 0 | 0 1 1 25 3 | 0 1 3 16 2 | 0 1 8 16 1 

13  sto  0  1  0          14    13    17    1   0   0   0   0   0   0   0   
Stack: 1 0 | 0 1 1 25 3 | 0 1 3 16 2 | 0 1 8 16 1 

14  jmp  0  0  16         16    13    17    1   0   0   0   0   0   0   0   
Stack: 1 0 | 0 1 1 25 3 | 0 1 3 16 2 | 0 1 8 16 1 

16  lod  0  1  0          17    13    17    1   0   0   0   0   0   0   0   
Stack: 1 0 | 0 1 1 25 3 | 0 1 3 16 2 | 0 1 8 16 1 

17  lod  1  0  4          18    13    17    1   1   0   0   0   0   0   0   
Stack: 1 0 | 0 1 1 25 3 | 0 1 3 16 2 | 0 1 8 16 1 

18  mul  0  0  1          19    13    17    1   1   0   0   0   0   0   0   
Stack: 1 0 | 0 1 1 25 3 | 0 1 3 16 2 | 0 1 8 16 1 

19  sto  0  1  0          20    13    17    1   1   0   0   0   0   0   0   
Stack: 1 0 | 0 1 1 25 3 | 0 1 3 16 2 | 0 1 8 16 1 

20  ret  0  0  0          16    8     12    1   1   0   0   0   0   0   0   
Stack: 1 0 | 0 1 1 25 3 | 0 1 3 16 2 

16  lod  0  1  0          17    8     12    1   1   0   0   0   0   0   0   
Stack: 1 0 | 0 1 1 25 3 | 0 1 3 16 2 

17  lod  1  0  4          18    8     12    1   2   0   0   0   0   0   0   
Stack: 1 0 | 0 1 1 25 3 | 0 1 3 16 2 

18  mul  0  0  1          19    8     12    2   2   0   0   0   0   0   0   
Stack: 1 0 | 0 1 1 25 3 | 0 1 3 16 2 

19  sto  0  1  0          20    8     12    2   2   0   0   0   0   0   0   
Stack: 2 0 | 0 1 1 25 3 | 0 1 3 16 2 

20  ret  0  0  0          16    3     7     2   2   0   0   0   0   0   0   
Stack: 2 0 | 0 1 1 25 3 

16  lod  0  1  0          17    3     7     2   2   0   0   0   0   0   0   
Stack: 2 0 | 0 1 1 25 3 

17  lod  1  0  4          18    3     7     2   3   0   0   0   0   0   0   
Stack: 2 0 | 0 1 1 25 3 

18  mul  0  0  1          19    3     7     6   3   0   0   0   0   0   0   
Stack: 2 0 | 0 1 1 25 3 

19  sto  0  1  0          20    3     7     6   3   0   0   0   0   0   0   
Stack: 6 0 | 0 1 1 25 3 

20  ret  0  0  0          25    1     2     6   3   0   0   0   0   0   0   
Stack: 6 0 

25  lod  0  0  0          26    1     2     6   3   0   0   0   0   0   0   
Stack: 6 0 

26  sio  0  0  1          27    1     2     6   3   0   0   0   0   0   0   
Stack: 6 0 

27  sio  0  0  3          28    1     2     6   3   0   0   0   0   0   0   
Stack: 6 0 



1. Use = instead of :=
Source Program:
const dark := 7;
var x,y,a; 
begin 
  read a;
    a := a * 4;

    x := a - y;
  write a;
end.


Lexeme Table:
lexeme           token type
const            28
dark             2
:=               20
7                3
;                18
var              29
x                2
,                17
y                2
,                17
a                2
;                18
begin            21
read             32
a                2
;                18
a                2
:=               20
a                2
*                6
4                3
;                18
x                2
:=               20
a                2
-                5
y                2
;                18
write            31
a                2
;                18
end              22
.                19


Lexeme List:
28|2|dark|20|3|7|18|29|2|x|17|2|y|17|2|a|18|21|32|2|a|18|2|a|20|2|a|6|3|4|18|2|x|20|2|a|5|2|y|18|31|2|a|18|22|19|
Parsing Error 12 at Line (1): "=" Expected.



1. Use = instead of :=
Source Program:
const dark = 7;
var x,y,a; 
begin 
  read a;
    a = a * 4;

    x := a - y;
  write a;
end.


Lexeme Table:
lexeme           token type
const            28
dark             2
=                9
7                3
;                18
var              29
x                2
,                17
y                2
,                17
a                2
;                18
begin            21
read             32
a                2
;                18
a                2
=                9
a                2
*                6
4                3
;                18
x                2
:=               20
a                2
-                5
y                2
;                18
write            31
a                2
;                18
end              22
.                19


Lexeme List:
28|2|dark|9|3|7|18|29|2|x|17|2|y|17|2|a|18|21|32|2|a|18|2|a|9|2|a|6|3|4|18|2|x|20|2|a|5|2|y|18|31|2|a|18|22|19|
Parsing Error 20 at Line (5): ":=" Expected



2. = must be followed by a number
Source Program:
const dark = ;
var x,y,a; 
begin 
  read a;
    a := a * 4;

    x := a - y;
  write a;
end.


Lexeme Table:
lexeme           token type
const            28
dark             2
=                9
;                18
var              29
x                2
,                17
y                2
,                17
a                2
;                18
begin            21
read             32
a                2
;                18
a                2
:=               20
a                2
*                6
4                3
;                18
x                2
:=               20
a                2
-                5
y                2
;                18
write            31
a                2
;                18
end              22
.                19


Lexeme List:
28|2|dark|9|18|29|2|x|17|2|y|17|2|a|18|21|32|2|a|18|2|a|20|2|a|6|3|4|18|2|x|20|2|a|5|2|y|18|31|2|a|18|22|19|
Parsing Error 13 at Line (1): Number Expected



3. Identifier must be followed by =
Source Program:
const dark;
var x,y,a; 
begin 
  read a;
    a := a * 4;

    x := a - y;
  write a;
end.


Lexeme Table:
lexeme           token type
const            28
dark             2
;                18
var              29
x                2
,                17
y                2
,                17
a                2
;                18
begin            21
read             32
a                2
;                18
a                2
:=               20
a                2
*                6
4                3
;                18
x                2
:=               20
a                2
-                5
y                2
;                18
write            31
a                2
;                18
end              22
.                19


Lexeme List:
28|2|dark|18|29|2|x|17|2|y|17|2|a|18|21|32|2|a|18|2|a|20|2|a|6|3|4|18|2|x|20|2|a|5|2|y|18|31|2|a|18|22|19|
Parsing Error 12 at Line (1): "=" Expected.



4. const must be followed by identifier
Source Program:
const = 5;
var x,y,a; 
begin 
  read a;
    a := a * 4;

    x := a - y;
  write a;
end.


Lexeme Table:
lexeme           token type
const            28
=                9
5                3
;                18
var              29
x                2
,                17
y                2
,                17
a                2
;                18
begin            21
read             32
a                2
;                18
a                2
:=               20
a                2
*                6
4                3
;                18
x                2
:=               20
a                2
-                5
y                2
;                18
write            31
a                2
;                18
end              22
.                19


Lexeme List:
28|9|3|5|18|29|2|x|17|2|y|17|2|a|18|21|32|2|a|18|2|a|20|2|a|6|3|4|18|2|x|20|2|a|5|2|y|18|31|2|a|18|22|19|
Parsing Error 10 at Line (1): Identifier Expected



4. var must be followed by identifier
Source Program:
const dark = 7;
var; 
begin 
  read a;
    a := a * 4;

    x := a - y;
  write a;
end.


Lexeme Table:
lexeme           token type
const            28
dark             2
=                9
7                3
;                18
var              29
;                18
begin            21
read             32
a                2
;                18
a                2
:=               20
a                2
*                6
4                3
;                18
x                2
:=               20
a                2
-                5
y                2
;                18
write            31
a                2
;                18
end              22
.                19


Lexeme List:
28|2|dark|9|3|7|18|29|18|21|32|2|a|18|2|a|20|2|a|6|3|4|18|2|x|20|2|a|5|2|y|18|31|2|a|18|22|19|
Parsing Error 10 at Line (2): Identifier Expected.



4. procedure must be followed by identifier
Source Program:
var f, n;
procedure ;
var ans1;
begin
 ans1:=n;
  n:= n-1;
   if n = 0 then 
   f := 1;
    if n > 0 then
     call fact;

      f:=f*ans1;
      end;
      begin
      n:=3;
      call fact;
      write f
      end.


Lexeme Table:
lexeme           token type
var              29
f                2
,                17
n                2
;                18
procedure        30
;                18
var              29
ans1             2
;                18
begin            21
ans1             2
:=               20
n                2
;                18
n                2
:=               20
n                2
-                5
1                3
;                18
if               23
n                2
=                9
0                3
then             24
f                2
:=               20
1                3
;                18
if               23
n                2
>                13
0                3
then             24
call             27
fact             2
;                18
f                2
:=               20
f                2
*                6
ans1             2
;                18
end              22
;                18
begin            21
n                2
:=               20
3                3
;                18
call             27
fact             2
;                18
write            31
f                2
end              22
.                19


Lexeme List:
29|2|f|17|2|n|18|30|18|29|2|ans1|18|21|2|ans1|20|2|n|18|2|n|20|2|n|5|3|1|18|23|2|n|9|3|0|24|2|f|20|3|1|18|23|2|n|13|3|0|24|27|2|fact|18|2|f|20|2|f|6|2|ans1|18|22|18|21|2|n|20|3|3|18|27|2|fact|18|31|2|f|22|19|
Parsing Error 10 at Line (2): Identifier Expected.



5. Semicolon or comma missing
Source Program:
const dark = 7;
var x y; 
begin 
  read a;
    a := a * 4;

    x := a - y;
  write a;
end.



Lexeme Table:
lexeme           token type
const            28
dark             2
=                9
7                3
;                18
var              29
x                2
y                2
;                18
begin            21
read             32
a                2
;                18
a                2
:=               20
a                2
*                6
4                3
;                18
x                2
:=               20
a                2
-                5
y                2
;                18
write            31
a                2
;                18
end              22
.                19


Lexeme List:
28|2|dark|9|3|7|18|29|2|x|2|y|18|21|32|2|a|18|2|a|20|2|a|6|3|4|18|2|x|20|2|a|5|2|y|18|31|2|a|18|22|19|
Parsing Error 30 at Line (2): Semicolon or Comma Expected


6. Semicolon or comma missing
Source Program:
const dark = 7;
var x, y
begin 
  read a;
    a := a * 4;

    x := a - y;
  write a;
end.


Lexeme Table:
lexeme           token type
const            28
dark             2
=                9
7                3
;                18
var              29
x                2
,                17
y                2
begin            21
read             32
a                2
;                18
a                2
:=               20
a                2
*                6
4                3
;                18
x                2
:=               20
a                2
-                5
y                2
;                18
write            31
a                2
;                18
end              22
.                19


Lexeme List:
28|2|dark|9|3|7|18|29|2|x|17|2|y|21|32|2|a|18|2|a|20|2|a|6|3|4|18|2|x|20|2|a|5|2|y|18|31|2|a|18|22|19|
Parsing Error 11 at Line (3): Semicolon or Comma Expected



6. Incorrect symbol after procedure declaration
Source Program:
var f, n;
procedure fact;
var ans1;
begin
 ans1:=n;
  n:= n-1;
   if n = 0 then 
   f := 1;
    if n > 0 then
     call fact;

      f:=f*ans1;
      end
      begin
      n:=3;
      call fact;
      write f
      end.


Lexeme Table:
lexeme           token type
var              29
f                2
,                17
n                2
;                18
procedure        30
fact             2
;                18
var              29
ans1             2
;                18
begin            21
ans1             2
:=               20
n                2
;                18
n                2
:=               20
n                2
-                5
1                3
;                18
if               23
n                2
=                9
0                3
then             24
f                2
:=               20
1                3
;                18
if               23
n                2
>                13
0                3
then             24
call             27
fact             2
;                18
f                2
:=               20
f                2
*                6
ans1             2
;                18
end              22
begin            21
n                2
:=               20
3                3
;                18
call             27
fact             2
;                18
write            31
f                2
end              22
.                19


Lexeme List:
29|2|f|17|2|n|18|30|2|fact|18|29|2|ans1|18|21|2|ans1|20|2|n|18|2|n|20|2|n|5|3|1|18|23|2|n|9|3|0|24|2|f|20|3|1|18|23|2|n|13|3|0|24|27|2|fact|18|2|f|20|2|f|6|2|ans1|18|22|21|2|n|20|3|3|18|27|2|fact|18|31|2|f|22|19|
Parsing Error 11 at Line (14): Semicolon Expected



6. Incorrect symbol after procedure declaration
Source Program:
var f, n;
procedure fact +;
var ans1;
begin
 ans1:=n;
  n:= n-1;
   if n = 0 then 
   f := 1;
    if n > 0 then
     call fact;

      f:=f*ans1;
      end;
      begin
      n:=3;
      call fact;
      write f
      end.


Lexeme Table:
lexeme           token type
var              29
f                2
,                17
n                2
;                18
procedure        30
fact             2
+                4
;                18
var              29
ans1             2
;                18
begin            21
ans1             2
:=               20
n                2
;                18
n                2
:=               20
n                2
-                5
1                3
;                18
if               23
n                2
=                9
0                3
then             24
f                2
:=               20
1                3
;                18
if               23
n                2
>                13
0                3
then             24
call             27
fact             2
;                18
f                2
:=               20
f                2
*                6
ans1             2
;                18
end              22
;                18
begin            21
n                2
:=               20
3                3
;                18
call             27
fact             2
;                18
write            31
f                2
end              22
.                19


Lexeme List:
29|2|f|17|2|n|18|30|2|fact|4|18|29|2|ans1|18|21|2|ans1|20|2|n|18|2|n|20|2|n|5|3|1|18|23|2|n|9|3|0|24|2|f|20|3|1|18|23|2|n|13|3|0|24|27|2|fact|18|2|f|20|2|f|6|2|ans1|18|22|18|21|2|n|20|3|3|18|27|2|fact|18|31|2|f|22|19|
Parsing Error 11 at Line (2): Semicolon Expected



9. Period Expected
Source Program:
const dark = 7;
var x,y,a; 
begin 
  read a;
    a := a * 4;
    x := a - y;
  write a;
end



Lexeme Table:
lexeme           token type
const            28
dark             2
=                9
7                3
;                18
var              29
x                2
,                17
y                2
,                17
a                2
;                18
begin            21
read             32
a                2
;                18
a                2
:=               20
a                2
*                6
4                3
;                18
x                2
:=               20
a                2
-                5
y                2
;                18
write            31
a                2
;                18
end              22


Lexeme List:
28|2|dark|9|3|7|18|29|2|x|17|2|y|17|2|a|18|21|32|2|a|18|2|a|20|2|a|6|3|4|18|2|x|20|2|a|5|2|y|18|31|2|a|18|22|
Parsing Error 6 at Line (8): Period Expected.



10. Semicolon missing between statements
17. Semicolon or end expected
Source Program:
const dark = 7;
var x,y,a; 
begin 
  read a;
    a := a * 4

    x := a - y;
  write a;
end.


Lexeme Table:
lexeme           token type
const            28
dark             2
=                9
7                3
;                18
var              29
x                2
,                17
y                2
,                17
a                2
;                18
begin            21
read             32
a                2
;                18
a                2
:=               20
a                2
*                6
4                3
x                2
:=               20
a                2
-                5
y                2
;                18
write            31
a                2
;                18
end              22
.                19


Lexeme List:
28|2|dark|9|3|7|18|29|2|x|17|2|y|17|2|a|18|21|32|2|a|18|2|a|20|2|a|6|3|4|2|x|20|2|a|5|2|y|18|31|2|a|18|22|19|
Parsing Error 15 at Line (7): "end" Expected or Statement Missing Semicolon.



11. Undeclared identifier
Source Program:
const dark = 7;
var x,y,a; 
begin 
  read a;
    w := a * 4;

    x := a - y;
  write a;
end.


Lexeme Table:
lexeme           token type
const            28
dark             2
=                9
7                3
;                18
var              29
x                2
,                17
y                2
,                17
a                2
;                18
begin            21
read             32
a                2
;                18
w                2
:=               20
a                2
*                6
4                3
;                18
x                2
:=               20
a                2
-                5
y                2
;                18
write            31
a                2
;                18
end              22
.                19


Lexeme List:
28|2|dark|9|3|7|18|29|2|x|17|2|y|17|2|a|18|21|32|2|a|18|2|w|20|2|a|6|3|4|18|2|x|20|2|a|5|2|y|18|31|2|a|18|22|19|
Parsing Error 28: Variable "w" Does Not Exist Within Current Scope.



12. Assignment to constant is not allowed
Source Program:
const dark = 7;
var x,y,a; 
begin 
  read a;
    dark := a * 4;

    x := a - y;
  write a;
end.


Lexeme Table:
lexeme           token type
const            28
dark             2
=                9
7                3
;                18
var              29
x                2
,                17
y                2
,                17
a                2
;                18
begin            21
read             32
a                2
;                18
dark             2
:=               20
a                2
*                6
4                3
;                18
x                2
:=               20
a                2
-                5
y                2
;                18
write            31
a                2
;                18
end              22
.                19


Lexeme List:
28|2|dark|9|3|7|18|29|2|x|17|2|y|17|2|a|18|21|32|2|a|18|2|dark|20|2|a|6|3|4|18|2|x|20|2|a|5|2|y|18|31|2|a|18|22|19|
Parsing Error 19 at Line (5): Cannot Reassign Constant "dark".



12. Assignment to procedure is not allowed
Source Program:
var f, n;
procedure fact;
var ans1;
begin
 fact:=1;
 ans1:=n;
  n:= n-1;
   if n = 0 then 
   f := 1;
    if n > 0 then
     call fact;

      f:=f*ans1;
      end;
      begin
      n:=3;
      call fact;
      write f
      end.


Lexeme Table:
lexeme           token type
var              29
f                2
,                17
n                2
;                18
procedure        30
fact             2
;                18
var              29
ans1             2
;                18
begin            21
fact             2
:=               20
1                3
;                18
ans1             2
:=               20
n                2
;                18
n                2
:=               20
n                2
-                5
1                3
;                18
if               23
n                2
=                9
0                3
then             24
f                2
:=               20
1                3
;                18
if               23
n                2
>                13
0                3
then             24
call             27
fact             2
;                18
f                2
:=               20
f                2
*                6
ans1             2
;                18
end              22
;                18
begin            21
n                2
:=               20
3                3
;                18
call             27
fact             2
;                18
write            31
f                2
end              22
.                19


Lexeme List:
29|2|f|17|2|n|18|30|2|fact|18|29|2|ans1|18|21|2|fact|20|3|1|18|2|ans1|20|2|n|18|2|n|20|2|n|5|3|1|18|23|2|n|9|3|0|24|2|f|20|3|1|18|23|2|n|13|3|0|24|27|2|fact|18|2|f|20|2|f|6|2|ans1|18|22|18|21|2|n|20|3|3|18|27|2|fact|18|31|2|f|22|19|
Parsing Error 26 at Line (5): Cannot Reassign Procedure "fact".



13. Assingment Operator Expected
Source Program:
const dark = 7;
var x,y,a; 
begin 
  read a;
    a a * 4;

    x := a - y;
  write a;
end.


Lexeme Table:
lexeme           token type
const            28
dark             2
=                9
7                3
;                18
var              29
x                2
,                17
y                2
,                17
a                2
;                18
begin            21
read             32
a                2
;                18
a                2
a                2
*                6
4                3
;                18
x                2
:=               20
a                2
-                5
y                2
;                18
write            31
a                2
;                18
end              22
.                19


Lexeme List:
28|2|dark|9|3|7|18|29|2|x|17|2|y|17|2|a|18|21|32|2|a|18|2|a|2|a|6|3|4|18|2|x|20|2|a|5|2|y|18|31|2|a|18|22|19|
Parsing Error 20 at Line (5): ":=" Expected



14. call must be followed by an identifier
Source Program:
var f, n;
procedure fact;
var ans1;
begin
 ans1:=n;
  n:= n-1;
   if n = 0 then 
   f := 1;
    if n > 0 then
     call ;

      f:=f*ans1;
      end;
      begin
      n:=3;
      call fact;
      write f
      end.


Lexeme Table:
lexeme           token type
var              29
f                2
,                17
n                2
;                18
procedure        30
fact             2
;                18
var              29
ans1             2
;                18
begin            21
ans1             2
:=               20
n                2
;                18
n                2
:=               20
n                2
-                5
1                3
;                18
if               23
n                2
=                9
0                3
then             24
f                2
:=               20
1                3
;                18
if               23
n                2
>                13
0                3
then             24
call             27
;                18
f                2
:=               20
f                2
*                6
ans1             2
;                18
end              22
;                18
begin            21
n                2
:=               20
3                3
;                18
call             27
fact             2
;                18
write            31
f                2
end              22
.                19


Lexeme List:
29|2|f|17|2|n|18|30|2|fact|18|29|2|ans1|18|21|2|ans1|20|2|n|18|2|n|20|2|n|5|3|1|18|23|2|n|9|3|0|24|2|f|20|3|1|18|23|2|n|13|3|0|24|27|18|2|f|20|2|f|6|2|ans1|18|22|18|21|2|n|20|3|3|18|27|2|fact|18|31|2|f|22|19|
Parsing Error 10 at Line (10): Identifier Expected.



15. call of a variable is meaningless
Source Program:
var a;
begin
call a
end.


Lexeme Table:
lexeme           token type
var              29
a                2
;                18
begin            21
call             27
a                2
end              22
.                19


Lexeme List:
29|2|a|18|21|27|2|a|22|19|
Parsing Error 24 at Line (3): Received identifier "a" is a Variable, not a Procedure.



15. call of a constant is meaningless
Source Program:
const a = 5;
begin
call a
end.


Lexeme Table:
lexeme           token type
const            28
a                2
=                9
5                3
;                18
begin            21
call             27
a                2
end              22
.                19


Lexeme List:
28|2|a|9|3|5|18|21|27|2|a|22|19|
Parsing Error 23 at Line (3): Received identifier "a" is a Constant, not a Procedure.



16. then expected
Source Program:
const dark = 7;
var x,y,a; 
begin 
  read a;
  if a > dark
    a := a * 4;

    x := a - y;
  write a;
end.


Lexeme Table:
lexeme           token type
const            28
dark             2
=                9
7                3
;                18
var              29
x                2
,                17
y                2
,                17
a                2
;                18
begin            21
read             32
a                2
;                18
if               23
a                2
>                13
dark             2
a                2
:=               20
a                2
*                6
4                3
;                18
x                2
:=               20
a                2
-                5
y                2
;                18
write            31
a                2
;                18
end              22
.                19


Lexeme List:
28|2|dark|9|3|7|18|29|2|x|17|2|y|17|2|a|18|21|32|2|a|18|23|2|a|13|2|dark|2|a|20|2|a|6|3|4|18|2|x|20|2|a|5|2|y|18|31|2|a|18|22|19|
Parsing Error 16 at Line (6): "then" Expected



18. do expected
Source Program:
const dark = 7;
var x,y,a; 
begin 
  read a;
  while a < dark
    a := a * 4;

    x := a - y;
  write a;
end.


Lexeme Table:
lexeme           token type
const            28
dark             2
=                9
7                3
;                18
var              29
x                2
,                17
y                2
,                17
a                2
;                18
begin            21
read             32
a                2
;                18
while            25
a                2
<                11
dark             2
a                2
:=               20
a                2
*                6
4                3
;                18
x                2
:=               20
a                2
-                5
y                2
;                18
write            31
a                2
;                18
end              22
.                19


Lexeme List:
28|2|dark|9|3|7|18|29|2|x|17|2|y|17|2|a|18|21|32|2|a|18|25|2|a|11|2|dark|2|a|20|2|a|6|3|4|18|2|x|20|2|a|5|2|y|18|31|2|a|18|22|19|
Parsing Error 17 at Line (6): "do" Expected



20. Relational operator expected
Source Program:
const dark = 7;
var x,y,a; 
begin 
  read a;
  if a  dark then
    a := a * 4;

    x := a - y;
  write a;
end.


Lexeme Table:
lexeme           token type
const            28
dark             2
=                9
7                3
;                18
var              29
x                2
,                17
y                2
,                17
a                2
;                18
begin            21
read             32
a                2
;                18
if               23
a                2
dark             2
then             24
a                2
:=               20
a                2
*                6
4                3
;                18
x                2
:=               20
a                2
-                5
y                2
;                18
write            31
a                2
;                18
end              22
.                19


Lexeme List:
28|2|dark|9|3|7|18|29|2|x|17|2|y|17|2|a|18|21|32|2|a|18|23|2|a|2|dark|24|2|a|20|2|a|6|3|4|18|2|x|20|2|a|5|2|y|18|31|2|a|18|22|19|
Parsing Error 18 at Line (5): Relational Operator Expected



21. Expression must not contain a procedure identifier
Source Program:
var a;
procedure fact;
begin
a:=1+fact;
end.


Lexeme Table:
lexeme           token type
var              29
a                2
;                18
procedure        30
fact             2
;                18
begin            21
a                2
:=               20
1                3
+                4
fact             2
;                18
end              22
.                19


Lexeme List:
29|2|a|18|30|2|fact|18|21|2|a|20|3|1|4|2|fact|18|22|19|
Parsing Error 25 at Line (4): Cannot Use A Procedure Within An Expression.



22. Right parenthesis missing
Source Program:
const dark = 7;
var x,y,a; 
begin 
  read a;
    a := (a * 4;

    x := a - y;
  write a;
end.


Lexeme Table:
lexeme           token type
const            28
dark             2
=                9
7                3
;                18
var              29
x                2
,                17
y                2
,                17
a                2
;                18
begin            21
read             32
a                2
;                18
a                2
:=               20
(                15
a                2
*                6
4                3
;                18
x                2
:=               20
a                2
-                5
y                2
;                18
write            31
a                2
;                18
end              22
.                19


Lexeme List:
28|2|dark|9|3|7|18|29|2|x|17|2|y|17|2|a|18|21|32|2|a|18|2|a|20|15|2|a|6|3|4|18|2|x|20|2|a|5|2|y|18|31|2|a|18|22|19|
Parsing Error 21 at Line (5): Closing Parentheses Expected.



24. An expression cannot begin with this symbol
Source Program:
const dark = 7;
var x,y,a; 
begin 
  read a;
    *a := a * 4;

    x := a - y;
  write a;
end.


Lexeme Table:
lexeme           token type
const            28
dark             2
=                9
7                3
;                18
var              29
x                2
,                17
y                2
,                17
a                2
;                18
begin            21
read             32
a                2
;                18
*                6
a                2
:=               20
a                2
*                6
4                3
;                18
x                2
:=               20
a                2
-                5
y                2
;                18
write            31
a                2
;                18
end              22
.                19


Lexeme List:
28|2|dark|9|3|7|18|29|2|x|17|2|y|17|2|a|18|21|32|2|a|18|6|2|a|20|2|a|6|3|4|18|2|x|20|2|a|5|2|y|18|31|2|a|18|22|19|
Parsing Error 15 at Line (5): "end" Expected.



25. This number is too large
Source Program:
const dark = 7;
var x,y,a; 
begin 
  read a;
  if a < dark then
    a := a * 4;

    x := a - 10000000;
  write a;
end.


****Lexing Error 01 at Line (8): Number Longer Than 5 Digits (10000000).



26. Identifier too long
Source Program:
var f, n, thisisalongidentifier;
procedure fact;
var ans1;
begin
 ans1:=n;
  n:= n-1;
   if n = 0 then 
   f := 1;
    if n > 0 then
     call fact;

      f:=f*ans1;
      end;
      begin
      n:=3;
      call fact;
      write f
      end.


****Lexing Error 02 at Line (1): Identifier Longer Than 11 Characters ("thisisalongidentifier").



27. Invalid Symbol
Source Program:
%
var f, n;
procedure fact;
var ans1;
begin
 ans1:=n;
  n:= n-1;
   if n = 0 then 
   f := 1;
    if n > 0 then
     call fact;

      f:=f*ans1;
      end;
      begin
      n:=3;
      call fact;
      write f
      end.


****Lexing Error 03 at Line (1): Unidentified Symbol ('%').
